@model IEnumerable<WebApplication1.Models.green_16_dec>

@{
    ViewBag.Title = "Home Page";
}

<script src="https://d3js.org/d3.v2.min.js?2.8.1"></script>
@section Scripts {
    @Scripts.Render("~/bundles/nouislider")
}

@Styles.Render("~/Content/nouislider")
<div class="center-block">
    <div id="diagram"></div>
    <div class="control btn-group" role="group">
        <button id="btn_PU" type="button" class="btn btn-danger">By Pickup</button>
        <button id="btn_DO" type="button" class="btn btn-info">By Dropoff</button>
        <button type="button" class="btn btn-success">Random</button>
    </div>

    <div class="sliderDiv control">
        <div id="zoneSlider"></div>
    </div>

    <div class="sliderDiv control">
        <div id="timeSlider"></div>
    </div>


    <input type="text" id="zoneNumber" readonly style="border:0; color:#f6931f; font-weight:bold;">
    <div id="loading">
        <i class="fa fa-spinner fa-pulse fa-3x fa-fw"></i>
        <span>Loading...</span>
    </div>

</div>
<pre id="zones" class="pre-scrollable"></pre>
<script>
        function retrieve(limit, type) {
            $("#zones").html(JSON.stringify(zones, null, 2));
            $("#loading").show();
            $(".control").hide();
            $.ajax({
                type: 'POST',
                url: "@Url.Action("AjaxRetrieveWithLimit", "Home")",
                data: { limit: limit, type:type },
                success: function (res) {
                    taxizones = JSON.parse(res[0]);

                      //assign random colors to chords
                    jQuery.each(taxizones, function (i, val) {
                        val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
                    });
                    zones = $.extend(true, [], taxizones);

                    var newMatrixJson = [];
                    jQuery.each(JSON.parse(res[3]), function (i, val) {
                        var sp = val.split(',');
                        var hold = [];
                        jQuery.each(sp, function (i, val) {
                            hold.push(parseInt(val));
                        });
                        newMatrixJson.push(hold);
                    });

                    matrixJson = newMatrixJson;
                    updateChords(matrixJson);
                    initSliders(limit);
                },
                error: function (emp) {
                    alert('Your Internet connection might be unstable, please refresh and try again.');
                }
            });
            $("#zones").html(JSON.stringify(zones, null, 2));
        }



       

        function initSliders(max) {
            var zoneSlider = document.getElementById('zoneSlider');

            noUiSlider.create(zoneSlider, {
                start: [1, max],
                step: 1,
                behaviour: 'drag-tap',
                connect: true,
                range: {
                    'min': 1,
                    'max': max
                }
            });

            zoneSlider.noUiSlider.on('change', function (values) {
                values[0] = parseInt(values[0], 10);
                values[1] = parseInt(values[1], 10);

                zone1 = values[0];
                zone2 = values[1];

                console.log(zone1);
                console.log(zone2);

                $("#zoneNumber").val(values[0] + " - " + values[1]);

                formatJSON(max);

            });

            var timeSlider = document.getElementById('timeSlider');

            noUiSlider.create(timeSlider, {
                start: [7, 12],
                step: 1,
                behaviour: 'drag-tap',
                connect: true,
                range: {
                    'min': 0,
                    'max': 23
                }
            });

            timeSlider.noUiSlider.on('change', function (values) {
                values[0] = parseInt(values[0], 10);
                values[1] = parseInt(values[1], 10);

                time1 = values[0];
                time2 = values[1];
                

                var trips = $.extend(true, [], matrixJson);
                zones = $.extend(true, [], taxizones);
                zones.splice(0, values[0] - 1);
                zones.splice(values[1] - values[0] + 1, max - values[1]);

                trips.splice(0, values[0] - 1);

                trips.splice(values[1] - values[0], max - values[1]);
                trips.forEach(function (element, i) {
                    element.splice(0, values[0] - 1);
                    element.splice(values[1] - values[0], max - values[1]);
                }, this);

                $("#zones").html(JSON.stringify(zones, null, 2));
                updateChords(trips);
            });
        };


        function formatJSON(max) {
            var trips = $.extend(true, [], matrixJson);
            zones = $.extend(true, [], taxizones);
            zones.splice(0, zone1 - 1);
            zones.splice(zone2 - zone1 + 1, max - zone2);
            trips.splice(0, zone1 - 1);
            trips.splice(zone2 - zone1, max - zone2);
            trips.forEach(function (element, i) {
                element.splice(0, zone1 - 1);
                element.splice(zone2 - zone1, max - zone2);
            }, this);

            $("#zones").html(JSON.stringify(zones, null, 2));
            updateChords(trips);
        }

        $(function () {
            // some default values to play with, before the server returns actual data
            var matrixJson = [
                [45, 49, 45, 74, 26, 18, 2, 4, 0, 9],
                [63, 16, 25, 51, 14, 4, 4, 7, 0, 22],
                [61, 36, 44, 27, 34, 14, 5, 5, 0, 17],
                [27, 24, 55, 9, 46, 20, 7, 2, 0, 5],
                [18, 58, 12, 6, 15, 9, 9, 4, 0, 24],
                [0, 0, 0, 0, 0, 0, 0, 6, 57, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 2, 0, 0],
                [4, 12, 2, 2, 3, 14, 28, 0, 0, 4],
                [1, 12, 9, 2, 17, 14, 18, 0, 0, 2]
            ];
            var taxizones = [{ "name": "East Harlem North" }, { "name": "Central Harlem" }, { "name": "East Harlem South" }, { "name": "Astoria" }, { "name": "Morningside Heights" }, { "name": "Williamsburg (North Side)" }, { "name": "Elmhurst" }, { "name": "Park Slope" }, { "name": "Central Harlem North" }, { "name": "Fort Greene" }];

            //assign random colors to chords
            jQuery.each(taxizones, function (i, val) {
                val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
            });
            var zones = $.extend(true, [], taxizones);
            var limit = 20, zone1 = 1, zone2 = 10, time1 = 0, time2 = 23; //some global variables needed.
            var type = "PU";  // the default order of TaxiZones is by pickup [PU] counts

            updateChords(matrixJson);
            retrieve(limit, type);
        });

</script>

<script>
        var width = 1000,
            height = 800,
            outerRadius = Math.min(width, height) / 2 - 50,
            innerRadius = outerRadius - 18;

        //create number formatting functions
        var formatPercent = d3.format("%");
        var numberWithCommas = d3.format("0,f");

        //create the arc path data generator for the groups
        var arc = d3.svg.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius);

        //create the chord path data generator for the chords
        var path = d3.svg.chord()
            .radius(innerRadius);

        //define the default chord layout parameters
        //within a function that returns a new layout object;
        //that way, you can create multiple chord layouts
        //that are the same except for the data.
        function getDefaultLayout() {
            return d3.layout.chord()
                .padding(0.03)
                .sortSubgroups(d3.descending)
                .sortChords(d3.ascending);
        }
        var last_layout; //store layout between updates

        /*** Initialize the visualization ***/
        var g = d3.select("#diagram").append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("id", "circle")
            .attr("transform",
            "translate(" + width / 2 + "," + height / 2 + ")");

        g.append("circle")
            .attr("r", outerRadius);



        /* Create OR update a chord layout from a data matrix */
        function updateChords(matrix) {
            layout = getDefaultLayout();
            layout.matrix(matrix);

            /* Create/update "group" elements */
            var groupG = g.selectAll("g.group")
                .data(layout.groups(), function (d) {
                    return d.index;
                    //use a key function in case the
                    //groups are sorted differently between updates
                });

            groupG.exit()
                .transition()
                .duration(1500)
                .attr("opacity", 0.5)
                .remove(); //remove after transitions are complete

            var newGroups = groupG.enter().append("g")
                .attr("class", "group");
            //the enter selection is stored in a variable so we can
            //enter the <path>, <text>, and <title> elements as well

            //Create the title tooltip for the new groups
            newGroups.append("title");

            //Update the (tooltip) title text based on the data
            groupG.select("title")
                .text(function (d, i) {
                    return numberWithCommas(d.value) +
                        " trips started in " +
                        zones[i].name;
                });

            //create the arc paths and set the constant attributes
            //(those based on the group index, not on the value)
            newGroups.append("path")
                .attr("id", function (d) {
                    return "group" + d.index;
                    //using d.index and not i to maintain consistency
                    //even if groups are sorted
                })
                .style("fill", function (d) {
                    return zones[d.index].color;
                });

            //update the paths to match the layout
            groupG.select("path")
                .transition()
                .duration(1500)
                .attr("opacity", 0.5) //optional, just to observe the transition
                .attr("d", arc)
                .transition().duration(10).attr("opacity", 1) //reset opacity
                ;

            newGroups.append("svg:text")
                .attr("xlink:href", function (d) {
                    return "#group" + d.index;
                })
                .attr("dy", ".35em")
                .attr("color", "#fff")
                .text(function (d) {
                    return zones[d.index].name;
                });

            //position group labels to match layout
            groupG.select("text")
                .transition()
                .duration(1500)
                .text(function (d) {
                    return zones[d.index].name;
                })
                .attr("transform", function (d) {
                    d.angle = (d.startAngle + d.endAngle) / 2;
                    //store the midpoint angle in the data object

                    return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")" +
                        " translate(" + (innerRadius + 26) + ")" +
                        (d.angle > Math.PI ? " rotate(180)" : " rotate(0)");
                    //include the rotate zero so that transforms can be interpolated
                })
                .attr("text-anchor", function (d) {
                    return d.angle > Math.PI ? "end" : "begin";
                });


            var chordPaths = g.selectAll("path.chord")
                .data(layout.chords(), chordKey);

            var newChords = chordPaths.enter()
                .append("path")
                .attr("class", "chord");

            newChords.append("title");

            chordPaths.select("title")
                .text(function (d) {
                    if (zones[d.target.index].name !== zones[d.source.index].name) {
                        return [numberWithCommas(d.source.value),
                            " trips from ",
                        zones[d.source.index].name,
                            " to ",
                        zones[d.target.index].name,
                            "\n",
                        numberWithCommas(d.target.value),
                            " trips from ",
                        zones[d.target.index].name,
                            " to ",
                        zones[d.source.index].name
                        ].join("");
                    } else {
                        return numberWithCommas(d.source.value) +
                            " trips started and ended in " +
                            zones[d.source.index].name;
                    }
                });

            chordPaths.exit().transition()
                .duration(1500)
                .attr("opacity", 0)
                .remove();

            chordPaths.transition()
                .duration(1500)
                .attr("opacity", 0.5)
                .style("fill", function (d) {
                    return zones[d.source.index].color;
                })
                .attr("d", path)
                .transition().duration(10).attr("opacity", 1);

            groupG.on("mouseover", function (d) {
                chordPaths.classed("fade", function (p) {
                    return ((p.source.index != d.index) && (p.target.index != d.index));
                });
            });

            g.on("mouseout", function () {
                if (this == g.node())
                    //only respond to mouseout of the entire circle
                    //not mouseout events for sub-components
                    chordPaths.classed("fade", false);
            });


            $("#loading").hide();
            $(".control").show();

            last_layout = layout;
        }

        function arcTween(oldLayout) {
            var oldGroups = {};
            if (oldLayout) {
                oldLayout.groups().forEach(function (groupData) {
                    oldGroups[groupData.index] = groupData;
                });
            }
            return function (d, i) {
                var tween;
                var old = oldGroups[d.index];
                if (old) { //there's a matching old group
                    tween = d3.interpolate(old, d);
                } else {
                    //create a zero-width arc object
                    var emptyArc = {
                        startAngle: d.startAngle,
                        endAngle: d.startAngle
                    };
                    tween = d3.interpolate(emptyArc, d);
                }
                return function (t) {
                    return arc(tween(t));
                };
            };
        }

        function chordKey(data) {
            return (data.source.index < data.target.index) ?
                data.source.index + "-" + data.target.index :
                data.target.index + "-" + data.source.index;
        }

        function chordTween(oldLayout) {
            var oldChords = {};
            if (oldLayout) {
                oldLayout.chords().forEach(function (chordData) {
                    oldChords[chordKey(chordData)] = chordData;
                });
            }

            return function (d, i) {
                var tween;
                var old = oldChords[chordKey(d)];
                if (old) {
                    if (d.source.index != old.source.index) {
                        old = {
                            source: old.target,
                            target: old.source
                        };
                    }

                    tween = d3.interpolate(old, d);
                } else {
                    //create a zero-width chord object
                    var emptyChord = {
                        source: {
                            startAngle: d.source.startAngle,
                            endAngle: d.source.startAngle
                        },
                        target: {
                            startAngle: d.target.startAngle,
                            endAngle: d.target.startAngle
                        }
                    };
                    tween = d3.interpolate(emptyChord, d);
                }
                return function (t) {
                    return path(tween(t));
                };
            };
        }
</script>