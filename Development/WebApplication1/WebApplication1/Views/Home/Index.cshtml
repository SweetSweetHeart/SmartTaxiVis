@model IEnumerable<WebApplication1.Models.green_16_dec>

@{
    ViewBag.Title = "Home Page";
}

<script src="https://d3js.org/d3.v2.min.js?2.8.1"></script>
@section Scripts {
    @Scripts.Render("~/bundles/nouislider")
}

@Styles.Render("~/Content/nouislider")
<div class="center-block">
    <div id="diagram"></div>

    <div class="control btn-group" role="group">
        <button id="btn_PU" type="button" class="btn btn-danger control-widget">By Pickup</button>
        <button id="btn_DO" type="button" class="btn btn-info control-widget">By Dropoff</button>
        <button id="btn_local" type="button" class="btn btn-success control-widget">Load local data</button>
    </div>

    <div class="sliderDiv control">
        <div id="zoneSlider"></div>
    </div>
    <span id="zoneNumber" style="color:#f6931f; font-weight:bold;"></span>

    <div class="sliderDiv control ">
        <div id="timeSlider"></div>
    </div>
    <span id="hourNumber" style="color:#4285f4; font-weight:bold;"></span>
    

    <div id="loading" style="display:none;">
        <span>
            <i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i>
            Loading...
        </span>
    </div>
</div>

<pre id="zones" class="pre-scrollable"></pre>
<script>


    function local(){
        limit = 20, zone1 = 1, zone2 = 20, time1 = 9, time2 = 15; //some global variables needed.
        type = "PU";  // the default order of TaxiZones is by pickup [PU] counts

         zoneSlider = document.getElementById('zoneSlider');
        timeSlider = document.getElementById('timeSlider');

        // some default values to play with, before the server returns actual data
        matrixJson = [
            [1998, 1844, 1974, 38, 950, 2, 1, 2, 1504, 1, 25, 4, 3, 2, 348, 9, 0, 27, 3, 3],
            [2148, 2111, 853, 19, 1183, 5, 3, 4, 2819, 2, 13, 6, 5, 4, 349, 5, 1, 13, 5, 8],
            [2634, 1022, 1560, 36, 435, 6, 16, 13, 674, 6, 21, 4, 5, 15, 132, 13, 0, 20, 6, 14],
            [25, 21, 34, 4325, 11, 53, 215, 14, 11, 3, 710, 5, 5, 50, 20, 701, 1, 1849, 15, 61],
            [799, 932, 339, 19, 1672, 3, 4, 5, 781, 5, 11, 2, 6, 4, 436, 5, 0, 8, 1, 5],
            [14, 19, 19, 134, 8, 1106, 41, 191, 17, 158, 50, 112, 119, 13, 11, 33, 86, 39, 106, 2539],
            [4, 2, 15, 264, 1, 12, 1946, 2, 8, 0, 2251, 1, 3, 332, 5, 643, 0, 118, 1, 27],
            [7, 5, 12, 16, 4, 86, 1, 2806, 5, 464, 9, 466, 281, 10, 4, 9, 85, 10, 192, 60],
            [951, 1558, 337, 14, 496, 4, 2, 6, 2203, 1, 2, 0, 3, 3, 313, 1, 2, 7, 2, 4],
            [7, 5, 5, 11, 5, 141, 2, 643, 4, 1212, 10, 470, 304, 7, 1, 6, 239, 11, 457, 72],
            [13, 2, 12, 419, 3, 19, 767, 1, 4, 2, 2416, 3, 5, 66, 5, 659, 2, 191, 5, 23],
            [5, 3, 2, 10, 2, 71, 4, 915, 1, 422, 5, 462, 287, 3, 1, 4, 129, 4, 180, 44],
            [3, 2, 17, 6, 2, 99, 3, 452, 0, 260, 12, 377, 568, 1, 3, 6, 318, 4, 218, 33],
            [2, 8, 3, 18, 4, 3, 130, 3, 0, 3, 59, 0, 3, 2424, 4, 26, 1, 14, 3, 7],
            [158, 165, 71, 12, 340, 2, 3, 3, 342, 1, 3, 1, 6, 5, 1047, 3, 2, 7, 2, 3],
            [8, 2, 9, 620, 2, 23, 594, 0, 3, 2, 757, 2, 2, 38, 3, 796, 2, 179, 3, 40],
            [4, 3, 6, 5, 5, 207, 1, 214, 3, 331, 7, 206, 428, 5, 4, 2, 120, 6, 271, 84],
            [16, 3, 19, 1023, 5, 15, 63, 6, 10, 1, 278, 3, 2, 21, 9, 150, 2, 2196, 2, 23],
            [3, 5, 6, 8, 1, 91, 1, 293, 1, 572, 11, 186, 210, 6, 4, 2, 292, 4, 206, 35],
            [5, 7, 6, 70, 5, 763, 7, 45, 11, 58, 20, 32, 31, 21, 4, 38, 23, 27, 16, 874]
        ];

        taxizones = [{ "name": "East Harlem North" }, { "name": "Central Harlem" }, { "name": "East Harlem South" },
        { "name": "Astoria" }, { "name": "Morningside Heights" }, { "name": "Williamsburg (North Side)" }, { "name": "Elmhurst" },
        { "name": "Park Slope" }, { "name": "Central Harlem North" }, { "name": "Fort Greene" }, { "name": "Jackson Heights" },
        { "name": "Boerum Hill" }, { "name": "Brooklyn Heights" }, { "name": "Forest Hills" }, { "name": "Washington Heights South" },
        { "name": "Woodside" }, { "name": "DUMBO/Vinegar Hill" }, { "name": "Steinway" }, { "name": "Downtown Brooklyn/MetroTech" },
        { "name": "Greenpoint" }];

        //assign random colors to chords
        jQuery.each(taxizones, function (i, val) {
            val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
        });
        zones = $.extend(true, [], taxizones);
    }

    $(function () {
        local();
        updateChords(matrixJson);        
        initSliders();
        $("#zoneNumber").text("Showing Zone " + zone1 + " to Zone " + zone2);
        $("#hourNumber").text("Showing hours from " + time1 + " to " + time2);

        $("#btn_PU").click(function () {
            type = "PU";
            retrieve(limit, type, time1, time2);
        });

        $("#btn_DO").click(function () {
            type = "DO";
            retrieve(limit, DO, time1, time2);
        });

        $("#btn_local").click(function () {
            local();
            formatJSON();    
        });
    });

    function retrieve(limit, type, time1, time2) {        
        $("#hourNumber").text("Showing hours from " + time1 + " to " + time2);

        zoneSlider.setAttribute('disabled', true);
        timeSlider.setAttribute('disabled', true);
        $(".control-widget").prop('disabled', true);
        $("#loading").show();
            $("#zones").html(JSON.stringify(zones, null, 2));
            $.ajax({
                type: 'POST',
                url: "@Url.Action("RetrieveTopZones", "Home")",
                data: { limit: limit, type: type, time1: time1, time2: time2 },
                success: function (res) {
                    taxizones = JSON.parse(res[0]);
                      //assign random colors to chords
                    jQuery.each(taxizones, function (i, val) {
                        val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
                    });
                    zones = $.extend(true, [], taxizones);

                    var newMatrixJson = [];
                    jQuery.each(JSON.parse(res[3]), function (i, val) {
                        var sp = val.split(',');
                        var hold = [];
                        jQuery.each(sp, function (i, val) {
                            hold.push(parseInt(val));
                        });
                        newMatrixJson.push(hold);
                    });
                    matrixJson = newMatrixJson;
                    formatJSON();
                    zoneSlider.removeAttribute('disabled');
                    timeSlider.removeAttribute('disabled');
                    $(".control-widget").prop('disabled', false);
                    $("#loading").hide();
                },
                error: function (emp) {
                    alert('Your Internet connection might be unstable, please refresh and try again.');
                }
            });
            $("#zones").html(JSON.stringify(zones, null, 2));
        }

        function initSliders() {
            noUiSlider.create(zoneSlider, {
                start: [1, limit],
                step: 1,
                behaviour: 'drag-tap',
                connect: true,
                range: {
                    'min': 1,
                    'max': limit
                }
            });

            zoneSlider.noUiSlider.on('change', function (values) {
                zone1 = parseInt(values[0], 10);
                zone2 = parseInt(values[1], 10);
                $("#zoneNumber").text("Showing Zone " + zone1 + " to Zone " + zone2);
                formatJSON();
            });

            noUiSlider.create(timeSlider, {
                start: [time1, time2],
                step: 1,
                behaviour: 'drag-tap',
                connect: true,
                range: {
                    'min': 0,
                    'max': 23
                }
            });
            timeSlider.noUiSlider.on('change', function (values) {
                time1 = parseInt(values[0], 10);
                time2 = parseInt(values[1], 10);
                retrieve(limit, type, time1, time2);
                formatJSON()
            });
        };


        function formatJSON() {
            var trips = $.extend(true, [], matrixJson);
            zones = $.extend(true, [], taxizones);
            zones.splice(0, zone1 - 1);
            zones.splice(zone2 - zone1 + 1, limit - zone2);
            trips.splice(0, zone1 - 1);
            trips.splice(zone2 - zone1, limit - zone2);
            trips.forEach(function (element, i) {
                element.splice(0, zone1 - 1);
                element.splice(zone2 - zone1, limit - zone2);
            }, this);

            $("#zones").html(JSON.stringify(zones, null, 2));
            updateChords(trips);
        }
</script>

<script>
        var width = 1000,
            height = 800,
            outerRadius = Math.min(width, height) / 2 - 50,
            innerRadius = outerRadius - 18;

        //create number formatting functions
        var formatPercent = d3.format("%");
        var numberWithCommas = d3.format("0,f");

        //create the arc path data generator for the groups
        var arc = d3.svg.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius);

        //create the chord path data generator for the chords
        var path = d3.svg.chord()
            .radius(innerRadius);

        //define the default chord layout parameters
        //within a function that returns a new layout object;
        //that way, you can create multiple chord layouts
        //that are the same except for the data.
        function getDefaultLayout() {
            return d3.layout.chord()
                .padding(0.03)
                .sortSubgroups(d3.descending)
                .sortChords(d3.ascending);
        }
        var last_layout; //store layout between updates

        /*** Initialize the visualization ***/
        var g = d3.select("#diagram").append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("id", "circle")
            .attr("transform",
            "translate(" + width / 2 + "," + height / 2 + ")");

        g.append("circle")
            .attr("r", outerRadius);



        /* Create OR update a chord layout from a data matrix */
        function updateChords(matrix) {
            layout = getDefaultLayout();
            layout.matrix(matrix);

            /* Create/update "group" elements */
            var groupG = g.selectAll("g.group")
                .data(layout.groups(), function (d) {
                    return d.index;
                    //use a key function in case the
                    //groups are sorted differently between updates
                });

            groupG.exit()
                .transition()
                .duration(1500)
                .attr("opacity", 0.5)
                .remove(); //remove after transitions are complete

            var newGroups = groupG.enter().append("g")
                .attr("class", "group");
            //the enter selection is stored in a variable so we can
            //enter the <path>, <text>, and <title> elements as well

            //Create the title tooltip for the new groups
            newGroups.append("title");

            //Update the (tooltip) title text based on the data
            groupG.select("title")
                .text(function (d, i) {
                    return numberWithCommas(d.value) +
                        " trips started in " +
                        zones[i].name;
                });

            //create the arc paths and set the constant attributes
            //(those based on the group index, not on the value)
            newGroups.append("path")
                .attr("id", function (d) {
                    return "group" + d.index;
                    //using d.index and not i to maintain consistency
                    //even if groups are sorted
                })
                .style("fill", function (d) {
                    return zones[d.index].color;
                });

            //update the paths to match the layout
            groupG.select("path")
                .transition()
                .duration(1500)
                .attr("opacity", 0.5) //optional, just to observe the transition
                .attr("d", arc)
                .transition().duration(10).attr("opacity", 1) //reset opacity
                ;

            newGroups.append("svg:text")
                .attr("xlink:href", function (d) {
                    return "#group" + d.index;
                })
                .attr("dy", ".35em")
                .attr("color", "#fff")
                .text(function (d) {
                    return zones[d.index].name;
                });

            //position group labels to match layout
            groupG.select("text")
                .transition()
                .duration(1500)
                .text(function (d) {
                    return zones[d.index].name;
                })
                .attr("transform", function (d) {
                    d.angle = (d.startAngle + d.endAngle) / 2;
                    //store the midpoint angle in the data object

                    return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")" +
                        " translate(" + (innerRadius + 26) + ")" +
                        (d.angle > Math.PI ? " rotate(180)" : " rotate(0)");
                    //include the rotate zero so that transforms can be interpolated
                })
                .attr("text-anchor", function (d) {
                    return d.angle > Math.PI ? "end" : "begin";
                });


            var chordPaths = g.selectAll("path.chord")
                .data(layout.chords(), chordKey);

            var newChords = chordPaths.enter()
                .append("path")
                .attr("class", "chord");

            newChords.append("title");

            chordPaths.select("title")
                .text(function (d) {
                    if (zones[d.target.index].name !== zones[d.source.index].name) {
                        return [numberWithCommas(d.source.value),
                            " trips from ",
                        zones[d.source.index].name,
                            " to ",
                        zones[d.target.index].name,
                            "\n",
                        numberWithCommas(d.target.value),
                            " trips from ",
                        zones[d.target.index].name,
                            " to ",
                        zones[d.source.index].name
                        ].join("");
                    } else {
                        return numberWithCommas(d.source.value) +
                            " trips started and ended in " +
                            zones[d.source.index].name;
                    }
                });

            chordPaths.exit().transition()
                .duration(1500)
                .attr("opacity", 0)
                .remove();

            chordPaths.transition()
                .duration(1500)
                .attr("opacity", 0.5)
                .style("fill", function (d) {
                    return zones[d.source.index].color;
                })
                .attr("d", path)
                .transition().duration(10).attr("opacity", 1);

            groupG.on("mouseover", function (d) {
                chordPaths.classed("fade", function (p) {
                    return ((p.source.index != d.index) && (p.target.index != d.index));
                });
            });

            g.on("mouseout", function () {
                if (this == g.node())
                    //only respond to mouseout of the entire circle
                    //not mouseout events for sub-components
                    chordPaths.classed("fade", false);
            });

            last_layout = layout;
        }

        function arcTween(oldLayout) {
            var oldGroups = {};
            if (oldLayout) {
                oldLayout.groups().forEach(function (groupData) {
                    oldGroups[groupData.index] = groupData;
                });
            }
            return function (d, i) {
                var tween;
                var old = oldGroups[d.index];
                if (old) { //there's a matching old group
                    tween = d3.interpolate(old, d);
                } else {
                    //create a zero-width arc object
                    var emptyArc = {
                        startAngle: d.startAngle,
                        endAngle: d.startAngle
                    };
                    tween = d3.interpolate(emptyArc, d);
                }
                return function (t) {
                    return arc(tween(t));
                };
            };
        }

        function chordKey(data) {
            return (data.source.index < data.target.index) ?
                data.source.index + "-" + data.target.index :
                data.target.index + "-" + data.source.index;
        }

        function chordTween(oldLayout) {
            var oldChords = {};
            if (oldLayout) {
                oldLayout.chords().forEach(function (chordData) {
                    oldChords[chordKey(chordData)] = chordData;
                });
            }

            return function (d, i) {
                var tween;
                var old = oldChords[chordKey(d)];
                if (old) {
                    if (d.source.index != old.source.index) {
                        old = {
                            source: old.target,
                            target: old.source
                        };
                    }

                    tween = d3.interpolate(old, d);
                } else {
                    //create a zero-width chord object
                    var emptyChord = {
                        source: {
                            startAngle: d.source.startAngle,
                            endAngle: d.source.startAngle
                        },
                        target: {
                            startAngle: d.target.startAngle,
                            endAngle: d.target.startAngle
                        }
                    };
                    tween = d3.interpolate(emptyChord, d);
                }
                return function (t) {
                    return path(tween(t));
                };
            };
        }
</script>