@model IEnumerable<WebApplication1.Models.green_16_dec>

@{
    ViewBag.Title = "Home Page";
}

@Scripts.Render("~/bundles/d3")
@Scripts.Render("~/bundles/nouislider")
@Scripts.Render("~/bundles/anymap")
@Styles.Render("~/Content/nouislider")
@Styles.Render("~/Content/anymap")
<div>
    <div id="graphs">
        <div id="chordDiagram"></div>
        <div id="anymap"></div>
    </div>
    <div id="controller">
        <div class="controlsWrapper">
            <h3>Trips displayed: <span id="tripCount">89885</span></h3>
            <button id="btn_pause" type="button" class="btn btn-danger control-widget"><i class="fa fa-pause" aria-hidden="true"></i>&nbsp;&nbsp;Animation</button>
        </div>
        <div class="slidersWrapper" id="zoneSlider" data-toggle="popover" data-placement="bottom" data-content="Adjust zoneMatrix"></div>
        @*<div class="slidersWrapper" id="hourSlider" data-toggle="popover" data-placement="bottom" data-content="Adjust hour range (Pending fix)"></div>*@
    </div>
    @*<div id="loading" style="display:none;">
            <span>
                <i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i>
                Loading...
            </span>
        </div>*@
</div>

<script>
    function local() {
        limit = 263, zone1 = 1, zone2 = 20, time1 = 9, time2 = 15; // Some global variables needed.

        zoneSlider = document.getElementById('zoneSlider');
        //hourSlider = document.getElementById('hourSlider');

        // Some default values to play with, before the server returns actual data
        tripMatrix = countT[0];
        zoneMatrix = zoneT[0];

        // Assign random colors to chords
        jQuery.each(zoneMatrix, function (i, val) {
            val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
        });
        zones = $.extend(true, [], zoneMatrix);

        connectorData = null;
        dataSet = anychart.data.set(zones);

        zoneTN = [];
        countTN = [];
    }

    function matrixAddition(a, b) {
        return a.map(function (n, i) {
            return n.map(function (o, j) {
                return o + b[i][j];
            });
        });
    }

    $(function () {
        local();
        renderMap();
        formatJSON();
        initSliders();
        $('[data-toggle="popover"]').popover({
            trigger: 'manual'
        });
        $('#hourSlider').popover('show');
        $('#zoneSlider').popover('show');

        $('#btn_pause').click(function (e) {
            e.preventDefault();
            toggleAnimation(false);
        });
        chordAnimation();
        //retrieveLocal(0);
    });


    function retrieveLocal(time) {
        var start = time;
        var end = time + 1;
        if (time == 24) {
            console.log(JSON.stringify(zoneTN));
            console.log(JSON.stringify(countTN));
        }
        else
        {
            if (time == 23) {
                end = 0;
            }
            $.ajax({
                type: 'POST',
                url: "@Url.Action("RetrieveTopZones", "Home")",
                data: { limit: 263, type: "PU", time1: start, time2: end },
                success: function (res) {
                    var pu_v = JSON.parse(res[1]);
                    var do_v = JSON.parse(res[2]);
                    var id_v = JSON.parse(res[4]);

                    zoneMatrix = JSON.parse(res[0]);
                    // Assign random colors to chords
                    jQuery.each(zoneMatrix, function (i, val) {
                        val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
                        val.Pickup = pu_v[i];
                        val.Dropoff = do_v[i];
                        val.id = id_v[i].toString();
                    });
                    zones = $.extend(true, [], zoneMatrix);
                    var newMatrixJson = [];
                    jQuery.each(JSON.parse(res[3]), function (i, val) {
                        var sp = val.split(',');
                        var hold = [];
                        jQuery.each(sp, function (i, val) {
                            hold.push(parseInt(val));
                        });
                        newMatrixJson.push(hold);
                    });

                    zoneTN.push(zones);
                    countTN.push(newMatrixJson);
                    retrieveLocal(time + 1);

                },
                error: function (emp) {
                    alert('Your Internet connection might be unstable, please refresh and try again.');
                }
            });
        }
    }


    // Reformat the trip matrix when conditions changes, and update related visualisations

    var targetSize = $("#chordDiagram").width() * .85;
    var marginSide = $("#chordDiagram").width() * .075;

    $(window).resize(function () {
        var svg = d3.select("#chordDiagram")
            .attr("width", targetSize)
            .attr("height", targetSize);

         outerRadius = Math.min(targetSize, targetSize) / 2 - 50,
            innerRadius = outerRadius - 18;

        arc = d3.svg.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius);

        path = d3.svg.chord()
            .radius(innerRadius);

        $('#circle').attr("r", outerRadius);
        $('[data-toggle="popover"]').popover('show');

    });

    var outerRadius = Math.min(targetSize, targetSize) / 2 - 50,
        innerRadius = outerRadius - 18;

    var viewBoxDimensions = "0 0 " + targetSize + " " + targetSize;

    // Create the arc path data generator for the groups
    var arc = d3.svg.arc()
        .innerRadius(innerRadius)
        .outerRadius(outerRadius);

    // Create the chord path data generator for the chords
    var path = d3.svg.chord()
        .radius(innerRadius);

        var last_layout; // store layout between updates

        // Create number formatting functions
        var formatPercent = d3.format("%");
        var numberWithCommas = d3.format("0,f");

        // Initialize the visualization
        var g = d3.select("#chordDiagram").append("svg")
            .attr("viewBox", viewBoxDimensions)
            .attr("preserveAspectRatio", "xMinYMid")
            .append("g")
        .attr("id", "circle")
        .attr("overflow-x", "visible")
        .attr("transform",
            "translate(" + targetSize / 2 + "," + targetSize / 2 + ")");

    g.append("circle")
        .attr("r", outerRadius);
</script>