@model IEnumerable<WebApplication1.Models.green_16_dec>

@{
    ViewBag.Title = "Home Page";
}

@Scripts.Render("~/bundles/d3")
@Scripts.Render("~/bundles/nouislider")
@Scripts.Render("~/bundles/anymap")
@Styles.Render("~/Content/nouislider")
@Styles.Render("~/Content/anymap")
<div class="center-block">
    <table>
        <tr>
            <td><div id="chordDiagram"></div></td>
            <td>
                <table>
                    <tr align="left">
                        <td></td>
                        <td>
                            Zone Slider

                            <br /><br />
                        </td>
                        <td>
                            Time Slider

                            <br /><br />
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>
                            <div id="zoneSlider" style="height:200px;"></div><br />
                        </td>
                        <td>
                            <div id="timeSlider" style="height:200px;"></div><br />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button id="btn_PU" type="button" class="btn btn-danger control-widget">By Pickup</button>
                        </td>
                        <td><button id="btn_DO" type="button" class="btn btn-info control-widget">By Dropoff</button></td>
                        <td>
                            <button id="btn_local" type="button" class="btn btn-success control-widget">Load local data</button>
                        </td>
                    </tr>
                    <tr>
                        <td>&nbsp;</td>
                    </tr>
                    <tr align="left">
                        <td></td>
                        <td>
                            Trips displayed:
                        </td>
                        <td id="tripCount" style="font-weight:bold;">89885</td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td></td>
            <td></td>
        </tr>
    </table>

    <div id="anymap"></div>
    <script type="text/javascript">
        function rendersBubbleMap() {
            $('#anymap').html("");
            // Creates map chart
            map = anychart.map();
            // Sets geodata using taxizones.js
            map.geoData('anychart.maps.taxizone');
            // Sets bubble min/max size settings
            map.minBubbleSize(1)
                .maxBubbleSize(10);
            // Sets Chart Title
            map.title()
                .enabled(false);

            var data1 = dataSet.mapAs(null, {
                name: 'name',
                id: 'id',
                size: 'Pickup'
            });
            // Creates first bubble series
            var series1 = map.bubble(data1);
            series1.fill("#e74c3c");
            series1.name('Trips originated')
                .hoverFill(series1.fill())
                .hoverStroke(series1.stroke())
                .legendItem({
                    iconType: 'circle',
                    iconFill: '#e74c3c'
                })
                // Sets series geo id field settings
                .geoIdField("LocationID");
            series1.labels()
                .anchor('leftTop')
                .position('right')
                .fontSize(14)
                .fontColor('#212121');

            var data2 = dataSet.mapAs(null, {
                name: 'name',
                id: 'id',
                size: 'Dropoff'
            });
            // Creates second bubble series
            var series2 = map.bubble(data2);
            series2.fill("#3498db");
            series2.name('Trips destinated')
                .labels(false)
                .hoverFill(series2.fill())
                .hoverStroke(series2.stroke())
                .legendItem({
                    iconType: 'circle',
                    iconFill: '#3498db'
                })
                // Sets series geo id field settings
                .geoIdField("LocationID");

            map.tooltip()
                .useHtml(true)
                .title({
                    fontColor: '#7c868e'
                })
                .padding([8, 13, 10, 13])
                .format(function () {
                    var span_for_value =
                        '<span style="color: #545f69; font-size: 12px; font-weight: bold">';
                    var span_for_description =
                        '<br/><span style="color: #7c868e; font-size: 12px; font-style: italic">';
                    if (this.getData('Dropoff') > 0) {
                        return span_for_value + this.getData('Pickup') +
                            ' trips orginated</span></strong>' +
                            span_for_description + this.getData(
                                'Dropoff') +
                            ' trips destinated</span>';
                    } else {
                        return span_for_value + this.getData('Pickup') +
                            ' trips destinated</span></strong>';
                    }
                });
            map.tooltip().background()
                .enabled(true)
                .fill('#fff')
                .stroke('#c1c1c1')
                .corners(3)
                .cornerType('round');

            // Sets legend
            map.legend()
                .enabled(true)
                .position('top')
                .align('center')
                .itemsLayout('horizontal')
                .padding(0, 0, 30, 0)
                .paginator(false);
            //map.interactivity().selectionMode(false);
            var zoomController = anychart.ui.zoom();
            zoomController.target(map);
            zoomController.render();

            map.contextMenu(false);
            // Sets container id for the chart
            map.container('anymap');
            // Initiates chart drawing
            map.draw();
            //redraw the map after fr
        }
    </script>



    <div id="loading" style="display:none;">
        <span>
            <i class="fa fa-spinner fa-pulse fa-2x fa-fw"></i>
            Loading...
        </span>
    </div>
</div>

<pre id="zones" class="pre-scrollable"></pre>
<script>


    function local(){
        limit = 20, zone1 = 1, zone2 = 20, time1 = 9, time2 = 15; //some global variables needed.
        type = "PU";  // the default order of TaxiZones is by pickup [PU] counts

        zoneSlider = document.getElementById('zoneSlider');
        timeSlider = document.getElementById('timeSlider');

        // some default values to play with, before the server returns actual data
        matrixJson = [[795, 811, 725, 470, 503, 7, 0, 125, 0, 1, 1, 2, 0, 2, 12, 133, 1, 1, 8, 3], [1009, 693, 398, 210, 232, 11, 8, 48, 1, 5, 1, 2, 0, 0, 8, 55, 5, 2, 9, 2], [736, 316, 753, 512, 856, 3, 1, 100, 0, 0, 0, 0, 0, 2, 3, 198, 0, 2, 1, 1], [245, 133, 319, 678, 237, 1, 0, 165, 0, 0, 0, 1, 0, 1, 2, 137, 1, 2, 1, 2], [394, 117, 664, 216, 727, 3, 1, 124, 0, 0, 2, 0, 2, 2, 0, 230, 2, 0, 2, 0], [4, 7, 3, 5, 3, 1068, 52, 8, 0, 3, 3, 1, 0, 4, 139, 4, 12, 164, 493, 98], [2, 5, 0, 1, 5, 73, 495, 0, 0, 1, 3, 1, 0, 1, 430, 1, 84, 196, 39, 13], [74, 31, 66, 183, 130, 1, 1, 467, 0, 1, 0, 1, 1, 2, 2, 206, 1, 2, 3, 1], [1, 0, 0, 0, 1, 1, 0, 0, 341, 140, 108, 174, 94, 174, 2, 0, 1, 0, 1, 2], [1, 7, 1, 0, 0, 2, 0, 0, 127, 791, 94, 140, 25, 58, 1, 0, 0, 2, 2, 0], [1, 2, 1, 2, 0, 0, 0, 0, 99, 136, 210, 145, 132, 88, 2, 1, 0, 1, 0, 3], [2, 0, 1, 1, 0, 2, 0, 1, 128, 230, 115, 155, 48, 70, 0, 0, 0, 2, 1, 2], [0, 3, 0, 1, 1, 0, 0, 1, 75, 47, 151, 64, 46, 97, 0, 0, 1, 1, 0, 2], [0, 3, 3, 0, 0, 0, 1, 2, 132, 77, 80, 79, 124, 82, 2, 0, 2, 1, 1, 4], [1, 0, 1, 1, 1, 119, 204, 0, 1, 0, 1, 0, 0, 2, 500, 0, 24, 149, 68, 11], [58, 28, 123, 156, 174, 1, 0, 173, 0, 0, 0, 2, 0, 0, 1, 186, 0, 0, 2, 0], [1, 1, 3, 1, 0, 8, 58, 2, 0, 0, 0, 0, 1, 1, 22, 0, 521, 6, 8, 5], [2, 1, 0, 1, 0, 172, 157, 1, 1, 0, 0, 2, 1, 0, 145, 1, 7, 173, 45, 18], [3, 10, 1, 2, 1, 259, 20, 3, 1, 0, 0, 2, 2, 1, 70, 1, 4, 43, 424, 20], [1, 3, 2, 0, 0, 75, 4, 2, 2, 1, 2, 2, 2, 4, 8, 0, 4, 13, 13, 487]];

        taxizones = [{ "name": "East Harlem North", "color": "#1CAEA8", "Pickup": 6347, "Dropoff": 3556, "id": "74" }, { "name": "East Harlem South", "color": "#E8AE69", "Pickup": 6180, "Dropoff": 2386, "id": "75" }, { "name": "Central Harlem", "color": "#4457DC", "Pickup": 5780, "Dropoff": 3280, "id": "41" }, { "name": "Morningside Heights", "color": "#575191", "Pickup": 4645, "Dropoff": 2739, "id": "166" }, { "name": "Central Harlem North", "color": "#E961D3", "Pickup": 3815, "Dropoff": 3192, "id": "42" }, { "name": "Astoria", "color": "#8F74DF", "Pickup": 3665, "Dropoff": 2203, "id": "7" }, { "name": "Elmhurst", "color": "#DD1314", "Pickup": 2937, "Dropoff": 1386, "id": "82" }, { "name": "Washington Heights South", "color": "#9719BC", "Pickup": 2788, "Dropoff": 1577, "id": "244" }, { "name": "Fort Greene", "color": "#AAED3D", "Pickup": 2735, "Dropoff": 1498, "id": "97" }, { "name": "Park Slope", "color": "#ED9D21", "Pickup": 2689, "Dropoff": 2000, "id": "181" }, { "name": "Brooklyn Heights", "color": "#52CD29", "Pickup": 2533, "Dropoff": 1198, "id": "33" }, { "name": "Boerum Hill", "color": "#AEDA5C", "Pickup": 2051, "Dropoff": 1157, "id": "25" }, { "name": "DUMBO/Vinegar Hill", "color": "#7F1825", "Pickup": 1886, "Dropoff": 666, "id": "66" }, { "name": "Downtown Brooklyn/MetroTech", "color": "#EBCAC7", "Pickup": 1786, "Dropoff": 909, "id": "65" }, { "name": "Jackson Heights", "color": "#969743", "Pickup": 1760, "Dropoff": 1653, "id": "129" }, { "name": "Hamilton Heights", "color": "#8A7A1F", "Pickup": 1647, "Dropoff": 1305, "id": "116" }, { "name": "Forest Hills", "color": "#C3F360", "Pickup": 1605, "Dropoff": 973, "id": "95" }, { "name": "Woodside", "color": "#DCF696", "Pickup": 1505, "Dropoff": 1012, "id": "260" }, { "name": "Steinway", "color": "#F94F63", "Pickup": 1440, "Dropoff": 1281, "id": "223" }, { "name": "Long Island City/Hunters Point", "color": "#461D9F", "Pickup": 1436, "Dropoff": 971, "id": "145" }];
        //assign random colors to chords
        jQuery.each(taxizones, function (i, val) {
            val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
        });
        zones = $.extend(true, [], taxizones);
        dataSet = anychart.data.set(zones);

    }

    $(function () {
        local();
        rendersBubbleMap();
        updateChords(matrixJson);
        initSliders();
        //rendersBubbleMap();
        $("#zones").html(JSON.stringify(zones, null, 2));
        //$("#zoneNumber").text("Showing Zone " + zone1 + " to Zone " + zone2);
        //$("#hourNumber").text("Showing hours from " + time1 + " to " + time2);

        $("#btn_PU").click(function () {
            type = "PU";
            retrieve(limit, type, time1, time2);
        });

        $("#btn_DO").click(function () {
            type = "DO";
            retrieve(limit, type, time1, time2);
        });

        $("#btn_local").click(function () {
            local();
            zoneSlider.noUiSlider.set([1, limit]);
            rendersBubbleMap();
            formatJSON();
        });
    });

    function retrieve(limit, type, time1, time2) {
        //$("#hourNumber").text("Showing hours from " + time1 + " to " + time2);
        zoneSlider.setAttribute('disabled', true);
        timeSlider.setAttribute('disabled', true);
        $(".control-widget").prop('disabled', true);
        $("#loading").show();
            $("#zones").html(JSON.stringify(zones, null, 2));
            $.ajax({
                type: 'POST',
                url: "@Url.Action("RetrieveTopZones", "Home")",
                data: { limit: limit, type: type, time1: time1, time2: time2 },
                success: function (res) {
                    var pu_v = JSON.parse(res[1]);
                    var do_v = JSON.parse(res[2]);
                    var id_v = JSON.parse(res[4]);


                    taxizones = JSON.parse(res[0]);
                      //assign random colors to chords
                    jQuery.each(taxizones, function (i, val) {
                        val.color = '#' + Math.random().toString(16).slice(2, 8).toUpperCase();
                        val.Pickup = pu_v[i];
                        val.Dropoff = do_v[i];
                        val.id = id_v[i].toString();
                    });
                    zones = $.extend(true, [], taxizones);
                    console.log(JSON.stringify(zones));
                    var newMatrixJson = [];
                    jQuery.each(JSON.parse(res[3]), function (i, val) {
                        var sp = val.split(',');
                        var hold = [];
                        jQuery.each(sp, function (i, val) {
                            hold.push(parseInt(val));
                        });
                        newMatrixJson.push(hold);
                    });
                    matrixJson = newMatrixJson;
                    console.log(JSON.stringify(newMatrixJson));
                    formatJSON();
                    zoneSlider.removeAttribute('disabled');
                    timeSlider.removeAttribute('disabled');
                    $(".control-widget").prop('disabled', false);
                    $("#loading").hide();
                },
                error: function (emp) {
                    alert('Your Internet connection might be unstable, please refresh and try again.');
                }
            });
            $("#zones").html(JSON.stringify(zones, null, 2));
        }

        function initSliders() {
            noUiSlider.create(zoneSlider, {
                orientation: 'vertical',
                tooltips: true,
                format: wNumb({
                    decimals: 0
                }),
                start: [1, limit],
                step: 1,
                behaviour: 'drag-tap',
                connect: true,
                range: {
                    'min': 1,
                    'max': limit
                }
            });

            zoneSlider.noUiSlider.on('change', function (values) {
                zone1 = values[0];
                zone2 = values[1];
                //$("#zoneNumber").text("Showing Zone " + zone1 + " to Zone " + zone2);
                formatJSON();
            });

            noUiSlider.create(timeSlider, {
                orientation: 'vertical',
                tooltips: true,
                format: wNumb({
                    decimals: 0
                }),
                start: [time1, time2],
                step: 1,
                behaviour: 'drag-tap',
                connect: true,
                range: {
                    'min': 0,
                    'max': 23
                }
            });
            timeSlider.noUiSlider.on('change', function (values) {
                time1 = values[0];
                time2 = values[1];
                retrieve(limit, type, time1, time2);
                formatJSON()
            });
        };


        function formatJSON() {
            var trips = $.extend(true, [], matrixJson);
            zones = $.extend(true, [], taxizones);
            zones.splice(0, zone1 - 1);
            zones.splice(zone2 - zone1 + 1, limit - zone2);
            trips.splice(0, zone1 - 1);
            trips.splice(zone2 - zone1, limit - zone2);
            trips.forEach(function (element, i) {
                element.splice(0, zone1 - 1);
                element.splice(zone2 - zone1, limit - zone2);
            }, this);

            $("#zones").html(JSON.stringify(zones, null, 2));

            tripCount = 0;

            jQuery.each(trips, function (i, val) {
                jQuery.each(val, function (j, val2) {
                    tripCount += parseInt(val2);
                });
            });
            $("#tripCount").html(tripCount);

            dataSet = anychart.data.set(zones);
            rendersBubbleMap();
            updateChords(trips);
        }


        var width = 800,
            height = 800,
            outerRadius = Math.min(width, height) / 2 - 50,
            innerRadius = outerRadius - 18;

        //create number formatting functions
        var formatPercent = d3.format("%");
        var numberWithCommas = d3.format("0,f");

        //create the arc path data generator for the groups
        var arc = d3.svg.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius);

        //create the chord path data generator for the chords
        var path = d3.svg.chord()
            .radius(innerRadius);

        //define the default chord layout parameters
        //within a function that returns a new layout object;
        //that way, you can create multiple chord layouts
        //that are the same except for the data.
        function getDefaultLayout() {
            return d3.layout.chord()
                .padding(0.03)
                .sortSubgroups(d3.descending)
                .sortChords(d3.ascending);
        }
        var last_layout; //store layout between updates

        /*** Initialize the visualization ***/
        var g = d3.select("#chordDiagram").append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("id", "circle")
            .attr("transform",
            "translate(" + width / 2 + "," + height / 2 + ")");

        g.append("circle")
            .attr("r", outerRadius);



        /* Create OR update a chord layout from a data matrix */
        function updateChords(matrix) {
            layout = getDefaultLayout();
            layout.matrix(matrix);

            /* Create/update "group" elements */
            var groupG = g.selectAll("g.group")
                .data(layout.groups(), function (d) {
                    return d.index;
                    //use a key function in case the
                    //groups are sorted differently between updates
                });

            groupG.exit()
                .transition()
                .duration(1500)
                .attr("opacity", 0.5)
                .remove(); //remove after transitions are complete

            var newGroups = groupG.enter().append("g")
                .attr("class", "group");
            //the enter selection is stored in a variable so we can
            //enter the <path>, <text>, and <title> elements as well

            //Create the title tooltip for the new groups
            newGroups.append("title");

            //Update the (tooltip) title text based on the data
            groupG.select("title")
                .text(function (d, i) {
                    return numberWithCommas(d.value) +
                        " trips started in " +
                        zones[i].name;
                });

            //create the arc paths and set the constant attributes
            //(those based on the group index, not on the value)
            newGroups.append("path")
                .attr("id", function (d) {
                    return "group" + d.index;
                    //using d.index and not i to maintain consistency
                    //even if groups are sorted
                })
                .style("fill", function (d) {
                    return zones[d.index].color;
                });

            //update the paths to match the layout
            groupG.select("path")
                .transition()
                .duration(1500)
                .attr("opacity", 0.5) //optional, just to observe the transition
                .attr("d", arc)
                .transition().duration(10).attr("opacity", 1) //reset opacity
                ;

            newGroups.append("svg:text")
                .attr("xlink:href", function (d) {
                    return "#group" + d.index;
                })
                .attr("dy", ".35em")
                .attr("color", "#fff")
                .text(function (d) {
                    return zones[d.index].name;
                });

            //position group labels to match layout
            groupG.select("text")
                .transition()
                .duration(1500)
                .text(function (d) {
                    return zones[d.index].name;
                })
                .attr("transform", function (d) {
                    d.angle = (d.startAngle + d.endAngle) / 2;
                    //store the midpoint angle in the data object

                    return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")" +
                        " translate(" + (innerRadius + 26) + ")" +
                        (d.angle > Math.PI ? " rotate(180)" : " rotate(0)");
                    //include the rotate zero so that transforms can be interpolated
                })
                .attr("text-anchor", function (d) {
                    return d.angle > Math.PI ? "end" : "begin";
                });


            var chordPaths = g.selectAll("path.chord")
                .data(layout.chords(), chordKey);

            var newChords = chordPaths.enter()
                .append("path")
                .attr("class", "chord");

            newChords.append("title");

            chordPaths.select("title")
                .text(function (d) {
                    if (zones[d.target.index].name !== zones[d.source.index].name) {
                        return [numberWithCommas(d.source.value),
                            " trips from ",
                        zones[d.source.index].name,
                            " to ",
                        zones[d.target.index].name,
                            "\n",
                        numberWithCommas(d.target.value),
                            " trips from ",
                        zones[d.target.index].name,
                            " to ",
                        zones[d.source.index].name
                        ].join("");
                    } else {
                        return numberWithCommas(d.source.value) +
                            " trips started and ended in " +
                            zones[d.source.index].name;
                    }
                });

            chordPaths.exit().transition()
                .duration(1500)
                .attr("opacity", 0)
                .remove();

            chordPaths.transition()
                .duration(1500)
                .attr("opacity", 0.5)
                .style("fill", function (d) {
                    return zones[d.source.index].color;
                })
                .attr("d", path)
                .transition().duration(10).attr("opacity", 1);

            groupG.on("mouseover", function (d) {
                chordPaths.classed("fade", function (p) {
                    return ((p.source.index != d.index) && (p.target.index != d.index));
                });
            });

            g.on("mouseout", function () {
                if (this == g.node())
                    //only respond to mouseout of the entire circle
                    //not mouseout events for sub-components
                    chordPaths.classed("fade", false);
            });

            last_layout = layout;
        }

        function arcTween(oldLayout) {
            var oldGroups = {};
            if (oldLayout) {
                oldLayout.groups().forEach(function (groupData) {
                    oldGroups[groupData.index] = groupData;
                });
            }
            return function (d, i) {
                var tween;
                var old = oldGroups[d.index];
                if (old) { //there's a matching old group
                    tween = d3.interpolate(old, d);
                } else {
                    //create a zero-width arc object
                    var emptyArc = {
                        startAngle: d.startAngle,
                        endAngle: d.startAngle
                    };
                    tween = d3.interpolate(emptyArc, d);
                }
                return function (t) {
                    return arc(tween(t));
                };
            };
        }

        function chordKey(data) {
            return (data.source.index < data.target.index) ?
                data.source.index + "-" + data.target.index :
                data.target.index + "-" + data.source.index;
        }

        function chordTween(oldLayout) {
            var oldChords = {};
            if (oldLayout) {
                oldLayout.chords().forEach(function (chordData) {
                    oldChords[chordKey(chordData)] = chordData;
                });
            }

            return function (d, i) {
                var tween;
                var old = oldChords[chordKey(d)];
                if (old) {
                    if (d.source.index != old.source.index) {
                        old = {
                            source: old.target,
                            target: old.source
                        };
                    }

                    tween = d3.interpolate(old, d);
                } else {
                    //create a zero-width chord object
                    var emptyChord = {
                        source: {
                            startAngle: d.source.startAngle,
                            endAngle: d.source.startAngle
                        },
                        target: {
                            startAngle: d.target.startAngle,
                            endAngle: d.target.startAngle
                        }
                    };
                    tween = d3.interpolate(emptyChord, d);
                }
                return function (t) {
                    return path(tween(t));
                };
            };
        }
</script>